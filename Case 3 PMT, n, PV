#include <iostream>
#include<cmath>
#include <fstream>

using namespace std;

double f(double installment,double PV,double periodicInterestRate, double n){
double temp;
temp=periodicInterestRate * (1 + (1 / ((pow(1 + periodicInterestRate, n)) - 1)));
temp-= installment / PV;
    return temp;

}

int main(int argc, char *argv[]) {
    double PV, installment, n, r, ubound = 1, lbound = 0;
    double ftemp,periodicInterestRate;
    int frequency;
    int openingMonth, openingYear;
    int lBound = 0, lBoundMonth = 1, uBoundMonth = 12;


    do {
        cout << "Please provide a pv  equal or bigger than " << lBound << endl;
        cin >> PV;
    } while (PV < 0);


    do {
        cout << "Please provide an installment  equal or bigger than " << lBound << endl;
        cin >> installment;
    } while (installment < 0);


    do {

        cout << "Enter n " << lBound << endl;
        cin >> n;
    } while (n <= 0);


    do {
        cout << "Current month in number within the range " << lBoundMonth << " to " << uBoundMonth << endl;
        cin >> openingMonth;
    } while (openingMonth < 1 || openingMonth > 12);

    cout << "Current year" << endl;
    cin >> openingYear;

    cout << "Frequency (1: monthly, 3: quarterly, 6: semi-annually, 12: annually)" << endl;
    cin >> frequency;



//Binary Search

    do {
        periodicInterestRate = lbound + (ubound - lbound)/2;
        ftemp = f(installment,PV,periodicInterestRate,n);

        if (ftemp > 0)
        {
            ubound = periodicInterestRate;
        }
        else
        {
            lbound = periodicInterestRate;
        }

    } while (abs(ubound-lbound) > 0.00000000000001);


    r=periodicInterestRate*(12 / frequency);

    //double n=log((installment/PV)/((installment/PV)-periodicInterestRate))/(log(1+periodicInterestRate));
    //double temp=(pow((1+periodicInterestRate), n))-1; // temp OK
    //double PV=installment/(periodicInterestRate*(1+(1/temp)));
    double openingBalance = PV;


    double interest = openingBalance * periodicInterestRate;

    double principal = installment - interest;


    double closingBalance = openingBalance - principal;
    // variables holding current month and year values (at each row)
    int tempMonth = openingMonth;
    int tempYear = openingYear;


    char listSeparator = ';';
    ofstream csvFile;
    csvFile.open("case34.csv");



//for (int j=1;j<9;j++)
//{
    csvFile << "Case 3_4:" << listSeparator << "Fixed principal interest payments and instalments given PMT,n and PV"
            << listSeparator << "" << listSeparator << "" << listSeparator << "" << listSeparator << ""
            << listSeparator << "" << listSeparator << "" << endl;
//}

    csvFile << "" << listSeparator << "" << listSeparator << "" << listSeparator << "" << listSeparator << ""
            << listSeparator << "" << listSeparator << "" << listSeparator << "" << endl;
    csvFile << "input" << listSeparator << "PV" << listSeparator << PV << endl;
    csvFile << "" << listSeparator << "frequency" << listSeparator << frequency << endl;
    csvFile << "" << listSeparator << "# of periods" << listSeparator << n << endl;
    csvFile << "" << listSeparator << "interest rate" << listSeparator << r << endl;
    csvFile << "" << listSeparator << "start month" << listSeparator << openingMonth << endl;
    csvFile << "" << listSeparator << "" << listSeparator << "" << listSeparator << "" << listSeparator << ""
            << listSeparator << "" << listSeparator << "" << listSeparator << "" << endl;


    csvFile << "PN" << listSeparator << "Date" << listSeparator << "OB" << listSeparator << "Princ" << listSeparator
            << "r" << listSeparator << "inter" << listSeparator << "install" << listSeparator << "CB" << endl;
    for (int i = 1; i <= n; i++) {
        csvFile << i << listSeparator << tempMonth << "/" << tempYear << listSeparator << openingBalance
                << listSeparator << principal << listSeparator << periodicInterestRate << listSeparator << interest
                << listSeparator << installment << listSeparator << closingBalance << endl;
        // temporary month value to be recalculated after each iteration
        // at each iteration increase month value by frequency
        tempMonth += frequency;
        // if the end of year
        if (tempMonth > 12) {
            // reset month value to january
            tempMonth = (tempMonth - 12);
            // increase year
            tempYear++;
        }
        openingBalance = closingBalance;
        interest = openingBalance * periodicInterestRate;
        principal = installment - interest;

        closingBalance = openingBalance - principal;


    }

    csvFile.close();
    cout << "File saved!" << endl;

    return 0;
}


