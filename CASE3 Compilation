#include <iostream>
#include<cmath>
#include <fstream>

using namespace std;

int main(int argc, char *argv[]) {
  double r, PV, n, installment;
  double frequency;
  int openingMonth, openingYear;
  int lBound=0, lBoundMonth=1, uBoundMonth=12;


  do {
    cout << "Please provide a pv  equal or bigger than " <<lBound<<endl;
    cin >> PV;
  }while (PV<0);


  do {
    cout << "Please provide an installment  equal or bigger than " <<lBound<<endl;
    cin >> installment;
  }while (installment<0);


  do {
    cout << "Enter an Interest rate in percentage bigger than "<<lBound<< endl;
    cin >> r;
  } while (r<=0);


  do {
    cout << "Number of compounding periods bigger than " <<lBound<<endl;
    cin >> n;
  } while(n<=0);


  do {
    cout << "Current month in number within the range " <<lBoundMonth<<" to "<<uBoundMonth<< endl;
    cin >> openingMonth;
  } while (openingMonth<1 || openingMonth>12);


  cout << "Current year" << endl;
  cin >> openingYear;


  cout << "Frequency (1: monthly, 3: quarterly, 6: semi-annually, 12: annually)" << endl;
  cin >> frequency;


  double openingBalance = PV;
  double periodicInterestRate = r/(12/frequency);
  double temp=(pow((1+periodicInterestRate), n))-1;
  double interest = openingBalance*periodicInterestRate;
  double principal = installment-interest;
  double closingBalance = openingBalance-principal;
  double tempMonth = openingMonth;
  int tempYear = openingYear;
  //[1] double installment= (PV*periodicInterestRate)*(1+(1/temp));
  //[2] double PV=installment/(periodicInterestRate*(1+(1/temp)));
  //[3] double n = log((installment/PV)/((installment/PV)-periodicInterestRate))/(log(1+periodicInterestRate));


  char listSeparator=',';
  ofstream csvFile;
  csvFile.open("case31.csv");


  csvFile<<"Case 3_2:"<<listSeparator<<"Fixed interest rate and installments, given 3 out of 4 input variables"<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<endl;
  csvFile<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<endl;
  csvFile<<"input"<<listSeparator<<"PV"<<listSeparator<<PV<<endl;
  csvFile<<""<<listSeparator<<"frequency"<<listSeparator<<frequency<<endl;
  csvFile<<""<<listSeparator<<"# of periods"<<listSeparator<<n<<endl;
  csvFile<<""<<listSeparator<<"interest rate"<<listSeparator<<r<<endl;
  csvFile<<""<<listSeparator<<"start month"<<listSeparator<<openingMonth<<endl;
  csvFile<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<listSeparator<<""<<endl;
  csvFile<<"PN"<<listSeparator<<"Date"<<listSeparator<<"OB"<<listSeparator<<"Princ"<<listSeparator<<"r"<<listSeparator<<"inter"<<listSeparator<<"install"<<listSeparator<<"CB"<<endl;

  for (int i = 1; i <= n; i++) {
    csvFile<<i<<listSeparator<<tempMonth<<"/"<<tempYear<<listSeparator<<openingBalance<<listSeparator<<principal<<listSeparator<<periodicInterestRate<<listSeparator<<interest<<listSeparator<<installment<<listSeparator<<closingBalance<<endl;
    tempMonth += frequency;

    if (tempMonth > 12) {
    tempMonth = (tempMonth-12);
    // [1] tempMonth = 1
    tempYear++;
    }

    openingBalance = closingBalance;
    interest = openingBalance*periodicInterestRate;
    principal=installment-interest;
    closingBalance = openingBalance-principal;
  }


  csvFile.close();
  cout << "File saved as case33.csv!" << endl;


  return 0;
}


